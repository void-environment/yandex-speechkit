#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ Yandex SpeechKit
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
"""

import os
import sys
import subprocess
from pathlib import Path


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        import pydub
        import requests
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False


def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª .env"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env...")
    
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    env_vars = {}
    with open('.env', 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                env_vars[key.strip()] = value.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
    iam_token = env_vars.get('YANDEX_CLOUD_IAM_TOKEN', '')
    folder_id = env_vars.get('YANDEX_FOLDER_ID', '')
    
    if not iam_token or iam_token == 'your_real_iam_token_here':
        print("‚ùå IAM —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    if not folder_id or folder_id == 'your_real_folder_id_here':
        print("‚ùå Folder ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    print("‚úÖ –§–∞–π–ª .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


def check_yc_cli():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Yandex Cloud CLI"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Yandex Cloud CLI...")
    
    yc_paths = [
        '~/yandex-cloud/bin/yc',
        'yc'
    ]
    
    for yc_path in yc_paths:
        try:
            result = subprocess.run([os.path.expanduser(yc_path), '--version'], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                print(f"‚úÖ Yandex Cloud CLI –Ω–∞–π–¥–µ–Ω: {yc_path}")
                return yc_path
        except:
            continue
    
    print("‚ö†Ô∏è Yandex Cloud CLI –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CLI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:")
    print("   curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash")
    return None


def get_tokens_interactive(yc_path):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤"""
    print("\nüîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º IAM —Ç–æ–∫–µ–Ω
        print("üìù –ü–æ–ª—É—á–∞—é IAM —Ç–æ–∫–µ–Ω...")
        result = subprocess.run([os.path.expanduser(yc_path), 'iam', 'create-token'], 
                              capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            iam_token = result.stdout.strip()
            print("‚úÖ IAM —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞: {result.stderr}")
            return None, None
        
        # –ü–æ–ª—É—á–∞–µ–º Folder ID
        print("üìù –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫...")
        result = subprocess.run([os.path.expanduser(yc_path), 'resource-manager', 'folder', 'list'], 
                              capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            if len(lines) > 1:  # –ï—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–∞–ø–∫–∞
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É (–æ–±—ã—á–Ω–æ default)
                folder_line = lines[1].split()
                if len(folder_line) > 0:
                    folder_id = folder_line[0]
                    print(f"‚úÖ Folder ID –ø–æ–ª—É—á–µ–Ω: {folder_id}")
                    return iam_token, folder_id
        
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Folder ID: {result.stderr}")
        return iam_token, None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return None, None


def update_env_file(iam_token, folder_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª .env —Å –Ω–æ–≤—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏"""
    print("üìù –û–±–Ω–æ–≤–ª—è—é —Ñ–∞–π–ª .env...")
    
    env_content = f"""# Yandex Cloud –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
YANDEX_CLOUD_IAM_TOKEN={iam_token}
YANDEX_FOLDER_ID={folder_id}

# –î–ª—è JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
SERVICE_ACCOUNT_ID=your_service_account_id
YANDEX_KEY_ID=your_key_id
YANDEX_PRIVATE_KEY=your_private_key_here
"""
    
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print("‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω")


def test_audio_recognition():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ"""
    print("\nüé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
    
    audio_file = "audio_2025-08-06_11-31-35.ogg"
    
    if not os.path.exists(audio_file):
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª {audio_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç
        result = subprocess.run([sys.executable, 'speech_to_text.py', audio_file], 
                              capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("‚úÖ –¢–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(result.stdout)
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ Yandex SpeechKit –ø—Ä–æ–µ–∫—Ç–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    env_ok = check_env_file()
    
    # –ï—Å–ª–∏ .env –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
    if not env_ok:
        yc_path = check_yc_cli()
        if yc_path:
            print("\nüí° –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤...")
            iam_token, folder_id = get_tokens_interactive(yc_path)
            
            if iam_token and folder_id:
                update_env_file(iam_token, folder_id)
                env_ok = True
            else:
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                print("üìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Ä—É—á–Ω—É—é:")
                print("   1. ~/yandex-cloud/bin/yc init")
                print("   2. ~/yandex-cloud/bin/yc iam create-token")
                print("   3. ~/yandex-cloud/bin/yc resource-manager folder list")
                print("   4. –û–±–Ω–æ–≤–∏—Ç–µ .env —Ñ–∞–π–ª")
                return
    
    if env_ok:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        if test_audio_recognition():
            print("\nüéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            print("\nüìñ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
            print("   python speech_to_text.py audio.ogg")
            print("   python main.py --audio *.mp3 --output-dir results/")
        else:
            print("\n‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


if __name__ == "__main__":
    main()